//
// Created by itechbear on 9/10/15.
//

#ifndef LIB_WORDS_MODEL_H_
#define LIB_WORDS_MODEL_H_

#include <cassert>
#include <string>
#include <thread>
#include <mutex>
#include <algorithm>
#include <boost/algorithm/string.hpp>

#include "ordered_vector.h"
#include "result_set.h"

class WordsModel {
 public:
  WordsModel();

  ~WordsModel();

  /**
   * @brief Load model file generated by word2vec
   * @param filepath [in] Vector file path
   * @return bool
   */
  bool ParseFromFile(const std::string &filepath);

  /**
   * @brief Get nearest words
   * @param phrase [in] One or more words separated by spaces
   * @param results [out] Nearest words
   * @return
   */
  bool GetNearestWords(const std::string &phrase,
                       const bool concurrent,
                       ResultSet *results) const;

 private:
  // This method could be rewritten as multi-threaded.
  void ComputeDistances(const std::map<std::string, uint64_t> &token_positions,
                        const size_t vector_length,
                        const std::vector<float> &vector_sum,
                        ResultSet *results) const;

  void ComputeDistancesConcurrently(const std::map<std::string, uint64_t> &token_positions,
                                    const size_t vector_length,
                                    const std::vector<float> &vector_sum,
                                    ResultSet *results) const;

  void ComputeDistancesBySlice(const std::map<std::string, uint64_t> &token_positions,
                               const size_t vector_length,
                               const std::vector<float> &vector_sum,
                               const size_t start,
                               const size_t end,
                               ResultSet *results) const;

  /**
   * @brief Prepare for parsing a new model file.
   */
  void Reset();

  bool model_loaded_;
  OrderedVector<std::string> words_;
  std::vector<std::vector<float>> vectors_;
};

#endif  // LIB_WORDS_MODEL_H_
